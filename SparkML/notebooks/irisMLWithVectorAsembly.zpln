{
 "paragraphs": [
  {
   "title": "Импорт данных об ирисах",
   "text": "import org.apache.spark.sql.DataFrame\n\nval basePath = \"../../zeppelin/notebook/SparkML\"\n\n\n// Load training data\nval trainingData:DataFrame = spark\n                .read\n                .option(\"header\", \"true\")\n                .option(\"inferSchema\", \"true\")\n                .csv(s\"$basePath/data/Iris.csv\")",
   "user": "anonymous",
   "dateUpdated": "2021-12-25 18:21:59.422",
   "progress": 100,
   "config": {
    "editorSetting": {
     "language": "scala",
     "editOnDblClick": false,
     "completionKey": "TAB",
     "completionSupport": true
    },
    "colWidth": 12.0,
    "editorMode": "ace/mode/scala",
    "fontSize": 9.0,
    "title": true,
    "results": {},
    "enabled": true
   },
   "settings": {
    "params": {},
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "import org.apache.spark.ml.classification.LogisticRegression\nimport org.apache.spark.sql.Dataset\nimport org.apache.spark.sql.DataFrame\n\u001b[1m\u001b[34mbasePath\u001b[0m: \u001b[1m\u001b[32mString\u001b[0m = ../../zeppelin/notebook/SparkML\n\u001b[1m\u001b[34mtrainingData\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [Id: int, SepalLengthCm: double ... 4 more fields]\n"
     }
    ]
   },
   "apps": [],
   "runtimeInfos": {
    "jobUrl": {
     "propertyName": "jobUrl",
     "label": "SPARK JOB",
     "tooltip": "View in Spark web UI",
     "group": "spark",
     "values": [
      {
       "jobUrl": "http://b3d0d85416c1:4040/jobs/job?id=4"
      },
      {
       "jobUrl": "http://b3d0d85416c1:4040/jobs/job?id=5"
      }
     ],
     "interpreterSettingId": "spark"
    }
   },
   "progressUpdateIntervalMs": 500,
   "jobName": "paragraph_1640455664251_1465956006",
   "id": "paragraph_1640455664251_1465956006",
   "dateCreated": "2021-12-25 18:07:44.251",
   "dateStarted": "2021-12-25 18:18:57.082",
   "dateFinished": "2021-12-25 18:18:57.568",
   "status": "FINISHED"
  },
  {
   "text": "trainingData.columns",
   "user": "anonymous",
   "dateUpdated": "2021-12-25 18:22:05.618",
   "progress": 0,
   "config": {
    "editorSetting": {
     "language": "scala",
     "editOnDblClick": false,
     "completionKey": "TAB",
     "completionSupport": true
    },
    "colWidth": 12.0,
    "editorMode": "ace/mode/scala",
    "fontSize": 9.0,
    "results": {},
    "enabled": true
   },
   "settings": {
    "params": {},
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "\u001b[1m\u001b[34mres4\u001b[0m: \u001b[1m\u001b[32mArray[String]\u001b[0m = Array(Id, SepalLengthCm, SepalWidthCm, PetalLengthCm, PetalWidthCm, Species)\n"
     }
    ]
   },
   "apps": [],
   "runtimeInfos": {},
   "progressUpdateIntervalMs": 500,
   "jobName": "paragraph_1640456133994_234555864",
   "id": "paragraph_1640456133994_234555864",
   "dateCreated": "2021-12-25 18:15:33.994",
   "dateStarted": "2021-12-25 18:22:05.620",
   "dateFinished": "2021-12-25 18:22:05.789",
   "status": "FINISHED"
  },
  {
   "text": "import org.apache.spark.ml.feature.{StringIndexer, VectorAssembler}\n\nval speciesIndexer = new StringIndexer()\n      .setInputCol(\"Species\")\n      .setOutputCol(\"indexedSpecies\")\n      .fit(trainingData)\n\nval assembler = new VectorAssembler()\n      .setHandleInvalid(\"skip\")\n      .setInputCols(Array(\"SepalLengthCm\", \"SepalWidthCm\", \"PetalLengthCm\", \"PetalWidthCm\"))\n      .setOutputCol(\"features\")\n\nval Array(train, test) = trainingData.randomSplit(Array(0.8, 0.2))",
   "user": "anonymous",
   "dateUpdated": "2021-12-25 18:32:27.130",
   "progress": 0,
   "config": {
    "editorSetting": {
     "language": "scala",
     "editOnDblClick": false,
     "completionKey": "TAB",
     "completionSupport": true
    },
    "colWidth": 12.0,
    "editorMode": "ace/mode/scala",
    "fontSize": 9.0,
    "results": {},
    "enabled": true
   },
   "settings": {
    "params": {},
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "import org.apache.spark.ml.feature.{StringIndexer, VectorAssembler}\n\u001b[1m\u001b[34mspeciesIndexer\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.ml.feature.StringIndexerModel\u001b[0m = strIdx_349c4787edbe\n\u001b[1m\u001b[34massembler\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.ml.feature.VectorAssembler\u001b[0m = vecAssembler_c239ef86fe54\n\u001b[1m\u001b[34mtrain\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [Id: int, SepalLengthCm: double ... 4 more fields]\n\u001b[1m\u001b[34mtest\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\u001b[0m = [Id: int, SepalLengthCm: double ... 4 more fields]\n"
     }
    ]
   },
   "apps": [],
   "runtimeInfos": {
    "jobUrl": {
     "propertyName": "jobUrl",
     "label": "SPARK JOB",
     "tooltip": "View in Spark web UI",
     "group": "spark",
     "values": [
      {
       "jobUrl": "http://b3d0d85416c1:4040/jobs/job?id=8"
      }
     ],
     "interpreterSettingId": "spark"
    }
   },
   "progressUpdateIntervalMs": 500,
   "jobName": "paragraph_1640455695778_248259373",
   "id": "paragraph_1640455695778_248259373",
   "dateCreated": "2021-12-25 18:08:15.778",
   "dateStarted": "2021-12-25 18:32:27.132",
   "dateFinished": "2021-12-25 18:32:27.558",
   "status": "FINISHED"
  },
  {
   "text": "speciesIndexer.labels",
   "user": "anonymous",
   "dateUpdated": "2021-12-25 18:30:30.022",
   "progress": 0,
   "config": {},
   "settings": {
    "params": {},
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "\u001b[1m\u001b[34mres5\u001b[0m: \u001b[1m\u001b[32mArray[String]\u001b[0m = Array(Iris-setosa, Iris-versicolor, Iris-virginica)\n"
     }
    ]
   },
   "apps": [],
   "runtimeInfos": {},
   "progressUpdateIntervalMs": 500,
   "jobName": "paragraph_1640457027490_806604182",
   "id": "paragraph_1640457027490_806604182",
   "dateCreated": "2021-12-25 18:30:27.490",
   "dateStarted": "2021-12-25 18:30:30.025",
   "dateFinished": "2021-12-25 18:30:30.170",
   "status": "FINISHED"
  },
  {
   "title": "Создадим и обучим модель",
   "text": "import org.apache.spark.ml.classification.RandomForestClassifier\nimport org.apache.spark.ml.feature.IndexToString\nimport org.apache.spark.ml.Pipeline\n\nval dt = new RandomForestClassifier()\n      .setLabelCol(\"indexedSpecies\")\n      .setFeaturesCol(\"features\")\n\n    val labelConverter = new IndexToString()\n      .setInputCol(\"prediction\")\n      .setOutputCol(\"predictedLabel\")\n      .setLabels(speciesIndexer.labels)\n\n    val pipeline = new Pipeline()\n      .setStages(Array(speciesIndexer, assembler, dt, labelConverter))\n\n    val model = pipeline.fit(trainingData)\n\n    val predictions = model.transform(test)",
   "user": "anonymous",
   "dateUpdated": "2021-12-25 18:32:33.370",
   "progress": 100,
   "config": {
    "title": true
   },
   "settings": {
    "params": {},
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "import org.apache.spark.ml.classification.RandomForestClassifier\nimport org.apache.spark.ml.feature.IndexToString\nimport org.apache.spark.ml.Pipeline\n\u001b[1m\u001b[34mdt\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.ml.classification.RandomForestClassifier\u001b[0m = rfc_2920852debf5\n\u001b[1m\u001b[34mlabelConverter\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.ml.feature.IndexToString\u001b[0m = idxToStr_7bab2af338c9\n\u001b[1m\u001b[34mpipeline\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.ml.Pipeline\u001b[0m = pipeline_c464b61a1c29\n\u001b[1m\u001b[34mmodel\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.ml.PipelineModel\u001b[0m = pipeline_c464b61a1c29\n\u001b[1m\u001b[34mpredictions\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.sql.DataFrame\u001b[0m = [Id: int, SepalLengthCm: double ... 10 more fields]\n"
     }
    ]
   },
   "apps": [],
   "runtimeInfos": {
    "jobUrl": {
     "propertyName": "jobUrl",
     "label": "SPARK JOB",
     "tooltip": "View in Spark web UI",
     "group": "spark",
     "values": [
      {
       "jobUrl": "http://b3d0d85416c1:4040/jobs/job?id=9"
      },
      {
       "jobUrl": "http://b3d0d85416c1:4040/jobs/job?id=10"
      },
      {
       "jobUrl": "http://b3d0d85416c1:4040/jobs/job?id=11"
      },
      {
       "jobUrl": "http://b3d0d85416c1:4040/jobs/job?id=12"
      },
      {
       "jobUrl": "http://b3d0d85416c1:4040/jobs/job?id=13"
      },
      {
       "jobUrl": "http://b3d0d85416c1:4040/jobs/job?id=14"
      },
      {
       "jobUrl": "http://b3d0d85416c1:4040/jobs/job?id=15"
      },
      {
       "jobUrl": "http://b3d0d85416c1:4040/jobs/job?id=16"
      },
      {
       "jobUrl": "http://b3d0d85416c1:4040/jobs/job?id=17"
      }
     ],
     "interpreterSettingId": "spark"
    }
   },
   "progressUpdateIntervalMs": 500,
   "jobName": "paragraph_1640455967572_1076485929",
   "id": "paragraph_1640455967572_1076485929",
   "dateCreated": "2021-12-25 18:12:47.572",
   "dateStarted": "2021-12-25 18:32:33.372",
   "dateFinished": "2021-12-25 18:32:34.991",
   "status": "FINISHED"
  },
  {
   "text": "predictions.select(\"predictedLabel\", \"species\", \"features\").show(10)",
   "user": "anonymous",
   "dateUpdated": "2021-12-25 18:39:18.917",
   "progress": 100,
   "config": {},
   "settings": {
    "params": {},
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "+---------------+---------------+-----------------+\n| predictedLabel|        species|         features|\n+---------------+---------------+-----------------+\n|    Iris-setosa|    Iris-setosa|[4.6,3.4,1.4,0.3]|\n|    Iris-setosa|    Iris-setosa|[5.0,3.4,1.5,0.2]|\n|    Iris-setosa|    Iris-setosa|[4.8,3.0,1.4,0.1]|\n|    Iris-setosa|    Iris-setosa|[4.3,3.0,1.1,0.1]|\n|    Iris-setosa|    Iris-setosa|[5.0,3.0,1.6,0.2]|\n|    Iris-setosa|    Iris-setosa|[5.2,3.5,1.5,0.2]|\n|    Iris-setosa|    Iris-setosa|[4.8,3.1,1.6,0.2]|\n|    Iris-setosa|    Iris-setosa|[5.1,3.4,1.5,0.2]|\n|    Iris-setosa|    Iris-setosa|[5.3,3.7,1.5,0.2]|\n|Iris-versicolor|Iris-versicolor|[7.0,3.2,4.7,1.4]|\n+---------------+---------------+-----------------+\nonly showing top 10 rows\n\nTest Error = 0.0\nimport org.apache.spark.ml.classification.RandomForestClassificationModel\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\n\u001b[1m\u001b[34mevaluator\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\u001b[0m = mcEval_92a6d82e0e69\n\u001b[1m\u001b[34maccuracy\u001b[0m: \u001b[1m\u001b[32mDouble\u001b[0m = 1.0\n"
     }
    ]
   },
   "apps": [],
   "runtimeInfos": {
    "jobUrl": {
     "propertyName": "jobUrl",
     "label": "SPARK JOB",
     "tooltip": "View in Spark web UI",
     "group": "spark",
     "values": [
      {
       "jobUrl": "http://b3d0d85416c1:4040/jobs/job?id=33"
      },
      {
       "jobUrl": "http://b3d0d85416c1:4040/jobs/job?id=34"
      },
      {
       "jobUrl": "http://b3d0d85416c1:4040/jobs/job?id=35"
      }
     ],
     "interpreterSettingId": "spark"
    }
   },
   "progressUpdateIntervalMs": 500,
   "jobName": "paragraph_1640456962235_252019609",
   "id": "paragraph_1640456962235_252019609",
   "dateCreated": "2021-12-25 18:29:22.235",
   "dateStarted": "2021-12-25 18:37:45.492",
   "dateFinished": "2021-12-25 18:37:45.991",
   "status": "FINISHED"
  },
  {
   "text": "import org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator    \n\nval evaluator = new MulticlassClassificationEvaluator()\n      .setLabelCol(\"indexedSpecies\")\n      .setPredictionCol(\"prediction\")\n      .setMetricName(\"accuracy\")\n\n    val accuracy = evaluator.evaluate(predictions)\n    println(s\"Test Error = ${(1.0 - accuracy)}\")",
   "user": "anonymous",
   "dateUpdated": "2021-12-25 18:39:27.101",
   "progress": 0,
   "config": {},
   "settings": {
    "params": {},
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "Test Error = 0.0\n\u001b[1m\u001b[34mevaluator\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\u001b[0m = mcEval_2c7a5e26fb5f\n\u001b[1m\u001b[34maccuracy\u001b[0m: \u001b[1m\u001b[32mDouble\u001b[0m = 1.0\n"
     }
    ]
   },
   "apps": [],
   "runtimeInfos": {
    "jobUrl": {
     "propertyName": "jobUrl",
     "label": "SPARK JOB",
     "tooltip": "View in Spark web UI",
     "group": "spark",
     "values": [
      {
       "jobUrl": "http://b3d0d85416c1:4040/jobs/job?id=36"
      },
      {
       "jobUrl": "http://b3d0d85416c1:4040/jobs/job?id=37"
      }
     ],
     "interpreterSettingId": "spark"
    }
   },
   "progressUpdateIntervalMs": 500,
   "jobName": "paragraph_1640457535800_1458171583",
   "id": "paragraph_1640457535800_1458171583",
   "dateCreated": "2021-12-25 18:38:55.800",
   "dateStarted": "2021-12-25 18:38:57.886",
   "dateFinished": "2021-12-25 18:38:58.347",
   "status": "FINISHED"
  },
  {
   "text": "   import org.apache.spark.ml.classification.RandomForestClassificationModel\n   \n    val rfModel = model.stages(2).asInstanceOf[RandomForestClassificationModel]\n    println(s\"Learned classification forest model:\\n ${rfModel.toDebugString}\")",
   "user": "anonymous",
   "dateUpdated": "2021-12-25 18:39:30.929",
   "progress": 0,
   "config": {},
   "settings": {
    "params": {},
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": [
     {
      "type": "TEXT",
      "data": "Learned classification forest model:\n RandomForestClassificationModel (uid=rfc_2920852debf5) with 20 trees\n  Tree 0 (weight 1.0):\n    If (feature 2 <= 2.45)\n     Predict: 0.0\n    Else (feature 2 > 2.45)\n     If (feature 2 <= 4.85)\n      If (feature 0 <= 4.95)\n       If (feature 2 <= 3.4)\n        Predict: 1.0\n       Else (feature 2 > 3.4)\n        Predict: 2.0\n      Else (feature 0 > 4.95)\n       If (feature 3 <= 1.55)\n        Predict: 1.0\n       Else (feature 3 > 1.55)\n        If (feature 1 <= 2.8499999999999996)\n         Predict: 2.0\n        Else (feature 1 > 2.8499999999999996)\n         Predict: 1.0\n     Else (feature 2 > 4.85)\n      If (feature 3 <= 1.65)\n       If (feature 0 <= 6.15)\n        If (feature 3 <= 1.55)\n         Predict: 2.0\n        Else (feature 3 > 1.55)\n         Predict: 1.0\n       Else (feature 0 > 6.15)\n        Predict: 1.0\n      Else (feature 3 > 1.65)\n       Predict: 2.0\n  Tree 1 (weight 1.0):\n    If (feature 3 <= 0.8)\n     Predict: 0.0\n    Else (feature 3 > 0.8)\n     If (feature 3 <= 1.75)\n      If (feature 2 <= 5.05)\n       If (feature 2 <= 4.95)\n        Predict: 1.0\n       Else (feature 2 > 4.95)\n        If (feature 0 <= 6.05)\n         Predict: 2.0\n        Else (feature 0 > 6.05)\n         Predict: 1.0\n      Else (feature 2 > 5.05)\n       If (feature 1 <= 2.75)\n        If (feature 0 <= 6.05)\n         Predict: 1.0\n        Else (feature 0 > 6.05)\n         Predict: 2.0\n       Else (feature 1 > 2.75)\n        Predict: 2.0\n     Else (feature 3 > 1.75)\n      Predict: 2.0\n  Tree 2 (weight 1.0):\n    If (feature 3 <= 0.8)\n     Predict: 0.0\n    Else (feature 3 > 0.8)\n     If (feature 0 <= 6.25)\n      If (feature 2 <= 4.75)\n       Predict: 1.0\n      Else (feature 2 > 4.75)\n       If (feature 0 <= 5.85)\n        Predict: 2.0\n       Else (feature 0 > 5.85)\n        If (feature 1 <= 3.05)\n         Predict: 2.0\n        Else (feature 1 > 3.05)\n         Predict: 1.0\n     Else (feature 0 > 6.25)\n      If (feature 3 <= 1.75)\n       If (feature 3 <= 1.45)\n        Predict: 1.0\n       Else (feature 3 > 1.45)\n        If (feature 0 <= 6.95)\n         Predict: 1.0\n        Else (feature 0 > 6.95)\n         Predict: 2.0\n      Else (feature 3 > 1.75)\n       Predict: 2.0\n  Tree 3 (weight 1.0):\n    If (feature 0 <= 5.45)\n     If (feature 2 <= 2.45)\n      Predict: 0.0\n     Else (feature 2 > 2.45)\n      Predict: 1.0\n    Else (feature 0 > 5.45)\n     If (feature 3 <= 1.75)\n      If (feature 3 <= 0.45)\n       Predict: 0.0\n      Else (feature 3 > 0.45)\n       If (feature 1 <= 2.25)\n        If (feature 2 <= 4.05)\n         Predict: 1.0\n        Else (feature 2 > 4.05)\n         Predict: 2.0\n       Else (feature 1 > 2.25)\n        If (feature 0 <= 6.75)\n         Predict: 1.0\n        Else (feature 0 > 6.75)\n         Predict: 2.0\n     Else (feature 3 > 1.75)\n      If (feature 2 <= 4.85)\n       If (feature 1 <= 3.05)\n        Predict: 2.0\n       Else (feature 1 > 3.05)\n        Predict: 1.0\n      Else (feature 2 > 4.85)\n       Predict: 2.0\n  Tree 4 (weight 1.0):\n    If (feature 3 <= 1.75)\n     If (feature 2 <= 2.45)\n      Predict: 0.0\n     Else (feature 2 > 2.45)\n      If (feature 0 <= 4.95)\n       Predict: 2.0\n      Else (feature 0 > 4.95)\n       If (feature 0 <= 6.05)\n        Predict: 1.0\n       Else (feature 0 > 6.05)\n        If (feature 2 <= 5.05)\n         Predict: 1.0\n        Else (feature 2 > 5.05)\n         Predict: 2.0\n    Else (feature 3 > 1.75)\n     Predict: 2.0\n  Tree 5 (weight 1.0):\n    If (feature 2 <= 1.7999999999999998)\n     Predict: 0.0\n    Else (feature 2 > 1.7999999999999998)\n     If (feature 3 <= 1.75)\n      If (feature 1 <= 2.6500000000000004)\n       If (feature 3 <= 1.35)\n        Predict: 1.0\n       Else (feature 3 > 1.35)\n        If (feature 0 <= 6.15)\n         Predict: 2.0\n        Else (feature 0 > 6.15)\n         Predict: 1.0\n      Else (feature 1 > 2.6500000000000004)\n       Predict: 1.0\n     Else (feature 3 > 1.75)\n      Predict: 2.0\n  Tree 6 (weight 1.0):\n    If (feature 2 <= 2.45)\n     Predict: 0.0\n    Else (feature 2 > 2.45)\n     If (feature 2 <= 4.85)\n      If (feature 3 <= 1.65)\n       Predict: 1.0\n      Else (feature 3 > 1.65)\n       If (feature 1 <= 3.05)\n        Predict: 2.0\n       Else (feature 1 > 3.05)\n        Predict: 1.0\n     Else (feature 2 > 4.85)\n      If (feature 3 <= 1.65)\n       If (feature 3 <= 1.55)\n        Predict: 2.0\n       Else (feature 3 > 1.55)\n        If (feature 0 <= 6.05)\n         Predict: 1.0\n        Else (feature 0 > 6.05)\n         Predict: 2.0\n      Else (feature 3 > 1.65)\n       Predict: 2.0\n  Tree 7 (weight 1.0):\n    If (feature 3 <= 0.8)\n     Predict: 0.0\n    Else (feature 3 > 0.8)\n     If (feature 3 <= 1.65)\n      If (feature 3 <= 1.55)\n       Predict: 1.0\n      Else (feature 3 > 1.55)\n       If (feature 1 <= 3.05)\n        Predict: 2.0\n       Else (feature 1 > 3.05)\n        Predict: 1.0\n     Else (feature 3 > 1.65)\n      If (feature 2 <= 4.85)\n       If (feature 0 <= 5.95)\n        Predict: 1.0\n       Else (feature 0 > 5.95)\n        Predict: 2.0\n      Else (feature 2 > 4.85)\n       Predict: 2.0\n  Tree 8 (weight 1.0):\n    If (feature 3 <= 0.8)\n     Predict: 0.0\n    Else (feature 3 > 0.8)\n     If (feature 3 <= 1.75)\n      If (feature 2 <= 5.05)\n       Predict: 1.0\n      Else (feature 2 > 5.05)\n       If (feature 2 <= 5.15)\n        If (feature 0 <= 6.05)\n         Predict: 1.0\n        Else (feature 0 > 6.05)\n         Predict: 2.0\n       Else (feature 2 > 5.15)\n        Predict: 2.0\n     Else (feature 3 > 1.75)\n      If (feature 1 <= 3.1500000000000004)\n       Predict: 2.0\n      Else (feature 1 > 3.1500000000000004)\n       If (feature 0 <= 5.95)\n        Predict: 1.0\n       Else (feature 0 > 5.95)\n        Predict: 2.0\n  Tree 9 (weight 1.0):\n    If (feature 2 <= 2.45)\n     Predict: 0.0\n    Else (feature 2 > 2.45)\n     If (feature 2 <= 4.75)\n      If (feature 0 <= 4.95)\n       If (feature 3 <= 1.05)\n        Predict: 1.0\n       Else (feature 3 > 1.05)\n        Predict: 2.0\n      Else (feature 0 > 4.95)\n       Predict: 1.0\n     Else (feature 2 > 4.75)\n      If (feature 2 <= 5.05)\n       If (feature 3 <= 1.75)\n        If (feature 1 <= 2.25)\n         Predict: 2.0\n        Else (feature 1 > 2.25)\n         Predict: 1.0\n       Else (feature 3 > 1.75)\n        Predict: 2.0\n      Else (feature 2 > 5.05)\n       Predict: 2.0\n  Tree 10 (weight 1.0):\n    If (feature 3 <= 0.45)\n     Predict: 0.0\n    Else (feature 3 > 0.45)\n     If (feature 2 <= 4.75)\n      If (feature 3 <= 1.65)\n       Predict: 1.0\n      Else (feature 3 > 1.65)\n       Predict: 2.0\n     Else (feature 2 > 4.75)\n      If (feature 0 <= 6.05)\n       If (feature 1 <= 3.05)\n        Predict: 2.0\n       Else (feature 1 > 3.05)\n        Predict: 1.0\n      Else (feature 0 > 6.05)\n       If (feature 0 <= 6.85)\n        Predict: 2.0\n       Else (feature 0 > 6.85)\n        If (feature 3 <= 1.55)\n         Predict: 1.0\n        Else (feature 3 > 1.55)\n         Predict: 2.0\n  Tree 11 (weight 1.0):\n    If (feature 2 <= 4.75)\n     If (feature 2 <= 2.45)\n      Predict: 0.0\n     Else (feature 2 > 2.45)\n      If (feature 3 <= 1.65)\n       Predict: 1.0\n      Else (feature 3 > 1.65)\n       Predict: 2.0\n    Else (feature 2 > 4.75)\n     If (feature 3 <= 1.85)\n      If (feature 2 <= 4.85)\n       If (feature 0 <= 5.95)\n        Predict: 1.0\n       Else (feature 0 > 5.95)\n        Predict: 2.0\n      Else (feature 2 > 4.85)\n       If (feature 1 <= 2.75)\n        If (feature 1 <= 2.6500000000000004)\n         Predict: 2.0\n        Else (feature 1 > 2.6500000000000004)\n         Predict: 1.0\n       Else (feature 1 > 2.75)\n        Predict: 2.0\n     Else (feature 3 > 1.85)\n      Predict: 2.0\n  Tree 12 (weight 1.0):\n    If (feature 3 <= 0.55)\n     Predict: 0.0\n    Else (feature 3 > 0.55)\n     If (feature 3 <= 1.75)\n      If (feature 0 <= 7.05)\n       If (feature 2 <= 5.15)\n        Predict: 1.0\n       Else (feature 2 > 5.15)\n        Predict: 2.0\n      Else (feature 0 > 7.05)\n       Predict: 2.0\n     Else (feature 3 > 1.75)\n      If (feature 1 <= 3.1500000000000004)\n       Predict: 2.0\n      Else (feature 1 > 3.1500000000000004)\n       If (feature 2 <= 4.85)\n        Predict: 1.0\n       Else (feature 2 > 4.85)\n        Predict: 2.0\n  Tree 13 (weight 1.0):\n    If (feature 3 <= 0.8)\n     Predict: 0.0\n    Else (feature 3 > 0.8)\n     If (feature 3 <= 1.75)\n      If (feature 2 <= 5.05)\n       If (feature 3 <= 1.55)\n        Predict: 1.0\n       Else (feature 3 > 1.55)\n        If (feature 0 <= 4.95)\n         Predict: 2.0\n        Else (feature 0 > 4.95)\n         Predict: 1.0\n      Else (feature 2 > 5.05)\n       Predict: 2.0\n     Else (feature 3 > 1.75)\n      If (feature 0 <= 5.95)\n       If (feature 2 <= 4.85)\n        Predict: 1.0\n       Else (feature 2 > 4.85)\n        Predict: 2.0\n      Else (feature 0 > 5.95)\n       Predict: 2.0\n  Tree 14 (weight 1.0):\n    If (feature 2 <= 2.45)\n     Predict: 0.0\n    Else (feature 2 > 2.45)\n     If (feature 3 <= 1.55)\n      Predict: 1.0\n     Else (feature 3 > 1.55)\n      If (feature 3 <= 1.75)\n       If (feature 0 <= 6.75)\n        If (feature 0 <= 4.95)\n         Predict: 2.0\n        Else (feature 0 > 4.95)\n         Predict: 1.0\n       Else (feature 0 > 6.75)\n        Predict: 2.0\n      Else (feature 3 > 1.75)\n       If (feature 0 <= 5.95)\n        If (feature 1 <= 3.05)\n         Predict: 2.0\n        Else (feature 1 > 3.05)\n         Predict: 1.0\n       Else (feature 0 > 5.95)\n        Predict: 2.0\n  Tree 15 (weight 1.0):\n    If (feature 2 <= 2.45)\n     Predict: 0.0\n    Else (feature 2 > 2.45)\n     If (feature 3 <= 1.65)\n      If (feature 0 <= 6.95)\n       If (feature 2 <= 4.95)\n        Predict: 1.0\n       Else (feature 2 > 4.95)\n        If (feature 2 <= 5.05)\n         Predict: 2.0\n        Else (feature 2 > 5.05)\n         Predict: 1.0\n      Else (feature 0 > 6.95)\n       Predict: 2.0\n     Else (feature 3 > 1.65)\n      If (feature 2 <= 4.85)\n       If (feature 0 <= 5.95)\n        Predict: 1.0\n       Else (feature 0 > 5.95)\n        Predict: 2.0\n      Else (feature 2 > 4.85)\n       Predict: 2.0\n  Tree 16 (weight 1.0):\n    If (feature 3 <= 0.8)\n     Predict: 0.0\n    Else (feature 3 > 0.8)\n     If (feature 0 <= 6.05)\n      If (feature 2 <= 4.55)\n       If (feature 3 <= 1.65)\n        Predict: 1.0\n       Else (feature 3 > 1.65)\n        Predict: 2.0\n      Else (feature 2 > 4.55)\n       If (feature 0 <= 5.85)\n        Predict: 2.0\n       Else (feature 0 > 5.85)\n        If (feature 1 <= 2.75)\n         Predict: 1.0\n        Else (feature 1 > 2.75)\n         Predict: 2.0\n     Else (feature 0 > 6.05)\n      If (feature 2 <= 4.95)\n       If (feature 0 <= 6.35)\n        If (feature 3 <= 1.65)\n         Predict: 1.0\n        Else (feature 3 > 1.65)\n         Predict: 2.0\n       Else (feature 0 > 6.35)\n        Predict: 1.0\n      Else (feature 2 > 4.95)\n       Predict: 2.0\n  Tree 17 (weight 1.0):\n    If (feature 0 <= 5.45)\n     If (feature 2 <= 2.45)\n      Predict: 0.0\n     Else (feature 2 > 2.45)\n      Predict: 1.0\n    Else (feature 0 > 5.45)\n     If (feature 2 <= 4.95)\n      If (feature 2 <= 1.7999999999999998)\n       Predict: 0.0\n      Else (feature 2 > 1.7999999999999998)\n       If (feature 3 <= 1.55)\n        Predict: 1.0\n       Else (feature 3 > 1.55)\n        Predict: 2.0\n     Else (feature 2 > 4.95)\n      If (feature 3 <= 1.65)\n       If (feature 1 <= 2.6500000000000004)\n        Predict: 2.0\n       Else (feature 1 > 2.6500000000000004)\n        If (feature 1 <= 2.75)\n         Predict: 1.0\n        Else (feature 1 > 2.75)\n         Predict: 2.0\n      Else (feature 3 > 1.65)\n       Predict: 2.0\n  Tree 18 (weight 1.0):\n    If (feature 3 <= 0.45)\n     Predict: 0.0\n    Else (feature 3 > 0.45)\n     If (feature 3 <= 1.65)\n      If (feature 3 <= 1.35)\n       Predict: 1.0\n      Else (feature 3 > 1.35)\n       If (feature 2 <= 4.75)\n        Predict: 1.0\n       Else (feature 2 > 4.75)\n        Predict: 2.0\n     Else (feature 3 > 1.65)\n      If (feature 3 <= 1.75)\n       If (feature 0 <= 4.95)\n        Predict: 2.0\n       Else (feature 0 > 4.95)\n        Predict: 1.0\n      Else (feature 3 > 1.75)\n       Predict: 2.0\n  Tree 19 (weight 1.0):\n    If (feature 2 <= 2.45)\n     Predict: 0.0\n    Else (feature 2 > 2.45)\n     If (feature 2 <= 4.75)\n      If (feature 1 <= 2.55)\n       If (feature 3 <= 1.55)\n        Predict: 1.0\n       Else (feature 3 > 1.55)\n        Predict: 2.0\n      Else (feature 1 > 2.55)\n       Predict: 1.0\n     Else (feature 2 > 4.75)\n      If (feature 2 <= 4.95)\n       If (feature 3 <= 1.55)\n        Predict: 1.0\n       Else (feature 3 > 1.55)\n        If (feature 1 <= 3.05)\n         Predict: 2.0\n        Else (feature 1 > 3.05)\n         Predict: 1.0\n      Else (feature 2 > 4.95)\n       Predict: 2.0\n\n\u001b[1m\u001b[34mrfModel\u001b[0m: \u001b[1m\u001b[32morg.apache.spark.ml.classification.RandomForestClassificationModel\u001b[0m = RandomForestClassificationModel (uid=rfc_2920852debf5) with 20 trees\n"
     }
    ]
   },
   "apps": [],
   "runtimeInfos": {},
   "progressUpdateIntervalMs": 500,
   "jobName": "paragraph_1640457229890_1916075613",
   "id": "paragraph_1640457229890_1916075613",
   "dateCreated": "2021-12-25 18:33:49.891",
   "dateStarted": "2021-12-25 18:37:07.924",
   "dateFinished": "2021-12-25 18:37:08.129",
   "status": "FINISHED"
  },
  {
   "title": "Сохранение модели",
   "text": "model.save(s\"$basePath/irisPipelineModel/irisRandomForestClassificationModel2\")",
   "user": "anonymous",
   "dateUpdated": "2021-12-25 18:45:05.970",
   "progress": 100,
   "config": {
    "title": true
   },
   "settings": {
    "params": {},
    "forms": {}
   },
   "results": {
    "code": "SUCCESS",
    "msg": []
   },
   "apps": [],
   "runtimeInfos": {
    "jobUrl": {
     "propertyName": "jobUrl",
     "label": "SPARK JOB",
     "tooltip": "View in Spark web UI",
     "group": "spark",
     "values": [
      {
       "jobUrl": "http://b3d0d85416c1:4040/jobs/job?id=38"
      },
      {
       "jobUrl": "http://b3d0d85416c1:4040/jobs/job?id=39"
      },
      {
       "jobUrl": "http://b3d0d85416c1:4040/jobs/job?id=40"
      },
      {
       "jobUrl": "http://b3d0d85416c1:4040/jobs/job?id=41"
      },
      {
       "jobUrl": "http://b3d0d85416c1:4040/jobs/job?id=42"
      },
      {
       "jobUrl": "http://b3d0d85416c1:4040/jobs/job?id=43"
      },
      {
       "jobUrl": "http://b3d0d85416c1:4040/jobs/job?id=44"
      },
      {
       "jobUrl": "http://b3d0d85416c1:4040/jobs/job?id=45"
      }
     ],
     "interpreterSettingId": "spark"
    }
   },
   "progressUpdateIntervalMs": 500,
   "jobName": "paragraph_1640457418794_248012628",
   "id": "paragraph_1640457418794_248012628",
   "dateCreated": "2021-12-25 18:36:58.794",
   "dateStarted": "2021-12-25 18:45:05.973",
   "dateFinished": "2021-12-25 18:45:16.184",
   "status": "FINISHED"
  }
 ],
 "name": "irisMLWithVectorAsembly",
 "id": "2GSAEAYM9",
 "defaultInterpreterGroup": "spark",
 "version": "0.10.0",
 "noteParams": {},
 "noteForms": {},
 "angularObjects": {},
 "config": {
  "isZeppelinNotebookCronEnable": false
 },
 "info": {}
}